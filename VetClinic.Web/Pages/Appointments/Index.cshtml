@page
@model VetClinic.Web.Pages.Appointments.IndexModel
@{
    ViewData["Title"] = "Appointments";
}

<div class="container-fluid">
    <!-- Success/Error Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle"></i> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h2><i class="fas fa-calendar-alt text-primary"></i> Appointments</h2>
                @if (ViewSessionHelper.IsInRole(ViewContext.HttpContext.Session, "Customer") || ViewSessionHelper.IsInAnyRole(ViewContext.HttpContext.Session, "Admin", "Manager") || ViewSessionHelper.IsInRole(ViewContext.HttpContext.Session, "Staff"))
                {
                    <a asp-page="./Book" class="btn btn-primary">
                        <i class="fas fa-plus"></i> Book Appointment
                    </a>
                }
            </div>
        </div>
    </div>

    <!-- Filters and Search -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0"><i class="fas fa-filter"></i> Filter Appointments</h6>
                </div>
                <div class="card-body">
                    <form method="get" class="row g-3">
                        <!-- Search -->
                        <div class="col-md-3">
                            <label for="searchTerm" class="form-label">Search</label>
                            <input asp-for="SearchTerm" class="form-control" placeholder="Pet name, owner, or notes..." />
                        </div>

                        <!-- Status Filter -->
                        <div class="col-md-2">
                            <label for="statusFilter" class="form-label">Status</label>
                            <select asp-for="StatusFilter" class="form-select">
                                <option value="">All Status</option>
                                <option value="Scheduled">Scheduled</option>
                                <option value="Confirmed">Confirmed</option>
                                <option value="InProgress">In Progress</option>
                                <option value="Completed">Completed</option>
                                <option value="Cancelled">Cancelled</option>
                                <option value="NoShow">No Show</option>
                            </select>
                        </div>

                        <!-- Date From -->
                        <div class="col-md-2">
                            <label for="dateFrom" class="form-label">Date From</label>
                            <input asp-for="DateFrom" type="date" class="form-control" />
                        </div>

                        <!-- Date To -->
                        <div class="col-md-2">
                            <label for="dateTo" class="form-label">Date To</label>
                            <input asp-for="DateTo" type="date" class="form-control" />
                        </div>

                        @if (ViewSessionHelper.IsInAnyRole(ViewContext.HttpContext.Session, "Admin", "Manager"))
                        {
                            <!-- Doctor Filter -->
                            <div class="col-md-2">
                                <label for="doctorFilter" class="form-label">Doctor</label>
                                <select asp-for="DoctorFilter" asp-items="Model.DoctorSelectList" class="form-select">
                                    <option value="">All Doctors</option>
                                </select>
                            </div>
                        }

                        <!-- Show Cancelled Toggle -->
                        <div class="col-md-2">
                            <div class="form-check mt-4">
                                <input asp-for="HideCancelled" class="form-check-input" type="checkbox" />
                                <label asp-for="HideCancelled" class="form-check-label">
                                    Hide Cancelled
                                </label>
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <div class="col-md-1 d-flex align-items-end">
                            <button type="submit" class="btn btn-outline-primary w-100">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Stats -->
    @if (ViewSessionHelper.IsInAnyRole(ViewContext.HttpContext.Session, "Admin", "Manager") || ViewSessionHelper.IsInRole(ViewContext.HttpContext.Session, "Doctor"))
    {
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card bg-primary text-white">
                    <div class="card-body text-center">
                        <h4>@Model.TodayCount</h4>
                        <p class="mb-0">Today's Appointments</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-success text-white">
                    <div class="card-body text-center">
                        <h4>@Model.UpcomingCount</h4>
                        <p class="mb-0">This Week</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-warning text-white">
                    <div class="card-body text-center">
                        <h4>@Model.PendingCount</h4>
                        <p class="mb-0">Pending Confirmation</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-info text-white">
                    <div class="card-body text-center">
                        <h4>@Model.CompletedCount</h4>
                        <p class="mb-0">Completed Today</p>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Appointments List -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="mb-0"><i class="fas fa-list"></i> Appointments List</h6>
                    <span class="badge bg-secondary">@Model.Appointments.Count() total</span>
                </div>
                <div class="card-body p-0">
                    @if (Model.Appointments.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Date & Time</th>
                                        <th>Pet</th>
                                        @if (ViewSessionHelper.IsInAnyRole(ViewContext.HttpContext.Session, "Admin", "Manager") || ViewSessionHelper.IsInRole(ViewContext.HttpContext.Session, "Staff") || ViewSessionHelper.IsInRole(ViewContext.HttpContext.Session, "Doctor"))
                                        {
                                            <th>Owner</th>
                                        }
                                        <th>Service</th>
                                        @if (ViewSessionHelper.IsInAnyRole(ViewContext.HttpContext.Session, "Admin", "Manager") || ViewSessionHelper.IsInRole(ViewContext.HttpContext.Session, "Customer"))
                                        {
                                            <th>Doctor</th>
                                        }
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var appointment in Model.Appointments)
                                    {
                                        <tr class="@(appointment.AppointmentTime.Date == DateTime.Today ? "table-info" : "")">
                                            <!-- Date & Time -->
                                            <td>
                                                <strong>@appointment.AppointmentTime.ToString("MMM dd, yyyy")</strong><br />
                                                <small class="text-muted">@appointment.AppointmentTime.ToString("hh:mm tt")</small>
                                                @if (appointment.AppointmentTime < DateTime.Now && appointment.Status != "Completed" && appointment.Status != "Cancelled")
                                                {
                                                    <br /><span class="badge bg-danger">Overdue</span>
                                                }
                                            </td>

                                            <!-- Pet -->
                                            <td>
                                                <strong>@appointment.Pet?.Name</strong><br />
                                                <small class="text-muted">@appointment.Pet?.Species @(!string.IsNullOrEmpty(appointment.Pet?.Breed) ? $"({appointment.Pet.Breed})" : "")</small>
                                            </td>

                                            <!-- Owner (for staff view) -->
                                            @if (ViewSessionHelper.IsInAnyRole(ViewContext.HttpContext.Session, "Admin", "Manager") || ViewSessionHelper.IsInRole(ViewContext.HttpContext.Session, "Staff") || ViewSessionHelper.IsInRole(ViewContext.HttpContext.Session, "Doctor"))
                                            {
                                                <td>
                                                    <strong>@appointment.Pet?.Owner?.FullName</strong><br />
                                                    <small class="text-muted">@appointment.Pet?.Owner?.Email</small>
                                                </td>
                                            }

                                            <!-- Service -->
                                            <td>
                                                <strong>@appointment.Service?.Name</strong><br />
                                                <small class="text-muted">$@appointment.Service?.Price.ToString("F2") • @appointment.Service?.DurationMinutes min</small>
                                            </td>

                                            <!-- Doctor (for customer view) -->
                                            @if (ViewSessionHelper.IsInAnyRole(ViewContext.HttpContext.Session, "Admin", "Manager") || ViewSessionHelper.IsInRole(ViewContext.HttpContext.Session, "Customer"))
                                            {
                                                <td>
                                                    <strong>@appointment.Doctor?.FullName</strong>
                                                </td>
                                            }

                                            <!-- Status -->
                                            <td>
                                                @{
                                                    var statusClass = appointment.Status switch
                                                    {
                                                        "Scheduled" => "bg-primary",
                                                        "Confirmed" => "bg-success",
                                                        "InProgress" => "bg-warning",
                                                        "Completed" => "bg-info",
                                                        "Cancelled" => "bg-secondary",
                                                        "NoShow" => "bg-danger",
                                                        _ => "bg-secondary"
                                                    };
                                                }
                                                <span class="badge @statusClass">@appointment.Status</span>
                                            </td>

                                            <!-- Actions -->
                                            <td>
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <!-- View Details -->
                                                    <a asp-page="./Details" asp-route-id="@appointment.Id" class="btn btn-outline-info" title="View Details">
                                                        <i class="fas fa-eye"></i>
                                                    </a>

                                                    @if (ViewSessionHelper.IsInAnyRole(ViewContext.HttpContext.Session, "Admin", "Manager") || ViewSessionHelper.IsInRole(ViewContext.HttpContext.Session, "Staff"))
                                                    {
                                                        <!-- Status Actions -->
                                                        @if (appointment.Status == "Scheduled")
                                                        {
                                                            <button type="button" class="btn btn-outline-success" onclick="updateStatus(@appointment.Id, 'Confirmed')" title="Confirm">
                                                                <i class="fas fa-check"></i>
                                                            </button>
                                                        }
                                                        @if (appointment.Status == "Confirmed" && appointment.AppointmentTime.Date == DateTime.Today)
                                                        {
                                                            <button type="button" class="btn btn-outline-warning" onclick="updateStatus(@appointment.Id, 'InProgress')" title="Start">
                                                                <i class="fas fa-play"></i>
                                                            </button>
                                                        }
                                                        @if (appointment.Status == "InProgress")
                                                        {
                                                            <button type="button" class="btn btn-outline-info" onclick="updateStatus(@appointment.Id, 'Completed')" title="Complete">
                                                                <i class="fas fa-check-circle"></i>
                                                            </button>
                                                        }
                                                    }

                                                    @{
                                                        var isCustomer = ViewSessionHelper.IsInRole(ViewContext.HttpContext.Session, "Customer");
                                                        var currentUserId = ViewContext.HttpContext.Session.GetInt32("UserId");
                                                        var isOwner = appointment.Pet?.OwnerId == currentUserId;
                                                        var canEdit = ViewSessionHelper.IsInAnyRole(ViewContext.HttpContext.Session, "Admin", "Manager", "Staff") || 
                                                                     (isCustomer && isOwner);
                                                        var canCancelCustomer = isCustomer && appointment.Status == "Scheduled" && appointment.AppointmentTime > DateTime.Now.AddHours(24);
                                                        var canCancelStaff = ViewSessionHelper.IsInAnyRole(ViewContext.HttpContext.Session, "Admin", "Manager", "Staff") && appointment.Status != "Completed" && appointment.Status != "Cancelled";
                                                    }



                                                    @if (canEdit)
                                                    {
                                                        <!-- Edit button for staff and customers (for their own pets) -->
                                                        @if (appointment.Status != "Completed" && appointment.Status != "Cancelled")
                                                        {
                                                            <a asp-page="./Edit" asp-route-id="@appointment.Id" class="btn btn-outline-primary" title="Edit Appointment">
                                                                <i class="fas fa-edit"></i>
                                                            </a>
                                                        }

                                                        <!-- Cancel button logic -->
                                                        @if (canCancelCustomer)
                                                        {
                                                            <!-- Customer can only cancel upcoming appointments (24+ hours ahead) -->
                                                            <button type="button" class="btn btn-outline-danger" onclick="cancelAppointment(@appointment.Id)" title="Cancel" data-appointment-id="@appointment.Id">
                                                                <i class="fas fa-times"></i> Cancel
                                                            </button>
                                                        }
                                                        else if (canCancelStaff)
                                                        {
                                                            <!-- Staff/Admin/Manager can cancel any non-completed appointment -->
                                                            <button type="button" class="btn btn-outline-danger" onclick="cancelAppointment(@appointment.Id)" title="Cancel" data-appointment-id="@appointment.Id">
                                                                <i class="fas fa-times"></i> Cancel
                                                            </button>
                                                        }
                                                        else
                                                        {
                                                        }
                                                    }
                                                    else
                                                    {
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-calendar-times fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No appointments found</h5>
                            <p class="text-muted">
                                @if (ViewSessionHelper.IsInRole(ViewContext.HttpContext.Session, "Customer"))
                                {
                                    <text>You don't have any appointments scheduled.</text>
                                }
                                else
                                {
                                    <text>No appointments match your current filters.</text>
                                }
                            </p>
                            @if (ViewSessionHelper.IsInRole(ViewContext.HttpContext.Session, "Customer") || ViewSessionHelper.IsInAnyRole(ViewContext.HttpContext.Session, "Admin", "Manager") || ViewSessionHelper.IsInRole(ViewContext.HttpContext.Session, "Staff"))
                            {
                                <a asp-page="./Book" class="btn btn-primary">
                                    <i class="fas fa-plus"></i> Book First Appointment
                                </a>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Status Update Form (Hidden) -->
<form id="statusUpdateForm" method="post" style="display: none;">
    <input name="appointmentId" id="statusAppointmentId" type="hidden" />
    <input name="newStatus" id="statusNewStatus" type="hidden" />
    <input name="handler" value="UpdateStatus" type="hidden" />
</form>

<!-- Cancel Form (Hidden) -->
<form id="cancelForm" method="post" style="display: none;">
    <input name="appointmentId" id="cancelAppointmentId" type="hidden" />
    <input name="handler" value="Cancel" type="hidden" />
</form>

<!-- Anti-forgery token for AJAX requests -->
@Html.AntiForgeryToken()

@section Scripts {
    <!-- SignalR -->
    <script src="~/lib/microsoft-signalr/signalr.min.js"></script>
    
    <script>
        // SignalR connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/appointmentHub")
            .build();

        // Start SignalR connection
        connection.start().then(function () {
            console.log("SignalR Connected");
            
            // Join user-specific group
            const userId = '@ViewContext.HttpContext.Session.GetInt32("UserId")';
            if (userId && userId !== '0') {
                connection.invoke("JoinUserGroup", userId.toString());
                console.log(`Joined user group: User_${userId}`);
            }
            
            // Join admin/staff group if user has permission
            const userRole = '@ViewContext.HttpContext.Session.GetString("UserRole")';
            if (userRole === 'Admin' || userRole === 'Manager' || userRole === 'Staff') {
                connection.invoke("JoinUserGroup", "AdminStaff");
                console.log("Joined AdminStaff group");
            }
            
        }).catch(function (err) {
            console.error("SignalR Connection Error:", err.toString());
        });

        // Listen for appointment cancellation notifications
        connection.on("AppointmentCancelled", function (data) {
            console.log("Received AppointmentCancelled notification:", data);
            
            // Update the appointment row in real-time
            updateAppointmentRowAfterCancel(data.appointmentId);
            
            // Show notification
            showAlert('info', `Real-time update: ${data.message}`);
        });

        // Listen for appointment status change notifications
        connection.on("AppointmentStatusChanged", function (data) {
            console.log("Received AppointmentStatusChanged notification:", data);
            
            // Update the appointment status in real-time
            updateAppointmentStatusInRow(data.appointmentId, data.status);
            
            // Show notification
            showAlert('info', `Real-time update: ${data.message}`);
        });

        function updateStatus(appointmentId, newStatus) {
            if (confirm(`Are you sure you want to mark this appointment as ${newStatus.toLowerCase()}?`)) {
                document.getElementById('statusAppointmentId').value = appointmentId;
                document.getElementById('statusNewStatus').value = newStatus;
                document.getElementById('statusUpdateForm').submit();
            }
        }

        function cancelAppointment(appointmentId) {
            console.log(`Canceling appointment with ID: ${appointmentId}`);
            if (confirm('Are you sure you want to cancel this appointment? This action cannot be undone.')) {
                console.log('User confirmed cancellation, sending AJAX request...');
                
                // Disable the button to prevent double-clicks
                const button = document.querySelector(`button[onclick*="cancelAppointment(${appointmentId})"]`);
                if (button) {
                    button.disabled = true;
                    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Cancelling...';
                }
                
                // Send AJAX request
                const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                console.log('Anti-forgery token:', antiForgeryToken);
                
                fetch(window.location.pathname + '?handler=Cancel', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: new URLSearchParams({
                        'appointmentId': appointmentId,
                        '__RequestVerificationToken': antiForgeryToken || ''
                    })
                })
                .then(response => {
                    console.log('AJAX Response received:', response.status, response.statusText);
                    console.log('Response headers:', response.headers);
                    console.log('Response URL:', response.url);
                    
                    // Try to get response as text first to see what we're getting
                    return response.text().then(text => {
                        console.log('Raw response text:', text);
                        
                        try {
                            // Try to parse as JSON
                            return JSON.parse(text);
                        } catch (e) {
                            console.error('Failed to parse JSON:', e);
                            console.error('Response was:', text.substring(0, 500) + '...');
                            throw new Error('Server returned HTML instead of JSON');
                        }
                    });
                })
                .then(data => {
                    console.log('AJAX Response data:', data);
                    if (data.success) {
                        console.log('Cancel request successful');
                        // Update the appointment row without page reload
                        updateAppointmentRowAfterCancel(appointmentId);
                        
                        // Show success message
                        showAlert('success', data.message || 'Appointment has been cancelled successfully.');
                    } else {
                        console.error('Cancel request failed:', data.message);
                        showAlert('error', data.message || 'Failed to cancel appointment. Please try again.');
                        
                        // Re-enable button on failure
                        if (button) {
                            button.disabled = false;
                            button.innerHTML = '<i class="fas fa-times"></i> Cancel';
                        }
                    }
                })
                .catch(error => {
                    console.error('AJAX Error:', error);
                    showAlert('error', 'An error occurred while cancelling the appointment.');
                    
                    // Re-enable button on error
                    if (button) {
                        button.disabled = false;
                        button.innerHTML = '<i class="fas fa-times"></i> Cancel';
                    }
                });
            } else {
                console.log('User cancelled the cancellation');
            }
        }
        
        function updateAppointmentRowAfterCancel(appointmentId) {
            console.log(`Updating appointment row ${appointmentId} to show cancelled status`);
            
            // Find the appointment row
            const button = document.querySelector(`button[onclick*="cancelAppointment(${appointmentId})"]`);
            const row = button?.closest('tr');
            
            if (row) {
                // Update status badge
                const statusCell = row.querySelector('.badge');
                if (statusCell) {
                    statusCell.className = 'badge bg-secondary';
                    statusCell.textContent = 'Cancelled';
                }
                
                // Remove cancel button and replace with cancelled text
                const actionCell = row.querySelector('.btn-group');
                if (actionCell) {
                    const cancelButton = actionCell.querySelector(`button[onclick*="cancelAppointment(${appointmentId})"]`);
                    if (cancelButton) {
                        cancelButton.remove();
                    }
                }
                
                console.log('Appointment row updated successfully');
            }
        }
        
        function updateAppointmentStatusInRow(appointmentId, newStatus) {
            console.log(`Updating appointment ${appointmentId} status to ${newStatus}`);
            
            // Find all rows and update the one with matching appointment ID
            const rows = document.querySelectorAll('tbody tr');
            rows.forEach(row => {
                const viewButton = row.querySelector(`a[href*="Details?id=${appointmentId}"]`);
                if (viewButton) {
                    const statusBadge = row.querySelector('.badge');
                    if (statusBadge) {
                        // Update status class and text
                        const statusClass = {
                            'Scheduled': 'bg-primary',
                            'Confirmed': 'bg-success',
                            'InProgress': 'bg-warning',
                            'Completed': 'bg-info',
                            'Cancelled': 'bg-secondary',
                            'NoShow': 'bg-danger'
                        }[newStatus] || 'bg-secondary';
                        
                        statusBadge.className = `badge ${statusClass}`;
                        statusBadge.textContent = newStatus;
                        console.log(`Updated status badge for appointment ${appointmentId}`);
                    }
                }
            });
        }
        
        function showAlert(type, message) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const icon = type === 'success' ? 'fas fa-check-circle' : 'fas fa-exclamation-triangle';
            
            const alertHtml = `
                <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                    <i class="${icon}"></i> ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            // Insert alert at the top of the container
            const container = document.querySelector('.container-fluid');
            if (container) {
                container.insertAdjacentHTML('afterbegin', alertHtml);
                
                // Auto-dismiss after 5 seconds
                setTimeout(() => {
                    const alert = container.querySelector('.alert');
                    if (alert) {
                        const bsAlert = new bootstrap.Alert(alert);
                        bsAlert.close();
                    }
                }, 5000);
            }
        }

        // Auto-dismiss alerts after 5 seconds
        setTimeout(function() {
            var alerts = document.querySelectorAll('.alert');
            alerts.forEach(function(alert) {
                var bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);
    </script>
} 